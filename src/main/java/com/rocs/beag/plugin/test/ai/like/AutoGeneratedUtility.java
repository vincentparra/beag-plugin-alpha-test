package com.rocs.beag.plugin.test.ai.like;
import java.util.ArrayList;
import java.util.List;

/**
 * AutoGeneratedUtility provides small, well-documented utility methods.
 * Designed to mimic consistent, AI-generated code style:
 * - Short methods
 * - Predictable patterns
 * - High comment density
 *
 * All methods are intentionally small and focused.
 */
public final class AutoGeneratedUtility {

    private AutoGeneratedUtility() {
        // Utility class; prevent instantiation.
    }

    /**
     * Add two integers.
     *
     * @param a first
     * @param b second
     * @return sum
     */
    public static int add(int a, int b) {
        return a + b;
    }

    /**
     * Subtract two integers.
     *
     * @param a minuend
     * @param b subtrahend
     * @return difference
     */
    public static int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Compute arithmetic mean of ints.
     *
     * @param values integer values
     * @return double average (0 if empty)
     */
    public static double average(int... values) {
        if (values == null || values.length == 0) {
            return 0.0;
        }
        int sum = 0;
        for (int v : values) {
            sum += v;
        }
        return ((double) sum) / values.length;
    }

    /**
     * Tokenize a string into tokens separated by whitespace and punctuation.
     *
     * @param text input
     * @return list of tokens
     */
    public static List<String> tokenize(String text) {
        List<String> r = new ArrayList<>();
        if (text == null || text.isEmpty()) {
            return r;
        }
        // Split by non-word characters
        String[] parts = text.split("\\W+");
        for (String p : parts) {
            if (!p.isEmpty()) {
                r.add(p);
            }
        }
        return r;
    }

    /**
     * Compute average token length for a string.
     *
     * @param text input
     * @return average token length
     */
    public static double averageTokenLength(String text) {
        List<String> toks = tokenize(text);
        if (toks.isEmpty()) {
            return 0.0;
        }
        int sum = 0;
        for (String t : toks) {
            sum += t.length();
        }
        return ((double) sum) / toks.size();
    }
}


